# Unique name for this workflow
name: Deploy PR to Personal org

# Definition when the workflow should run
on:
    push:
      branches: [ dev ]
      paths:
        - 'force-app/**'
            

# Jobs to be executed
jobs:
  generate-matrix:
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    env:
      secrets: ${{ toJSON(secrets) }}

    steps:
      - name: Print Secrets
        run: |
          echo "Secrets: $secrets"

      - name: Create PERSONALORGS
        id: get-personal-orgs
        run: |
          # Extract values from keys ending with '_PERSONAL'
          PERSONALORGS=($(echo "$secrets" | jq -r 'to_entries | map(select(.key | endswith("_PERSONAL"))) | .[].value'))


          # Output the array for verification
          echo "PERSONALORGS: [${PERSONALORGS[*]}]"
          echo "PERSONALORGS=${PERSONALORGS[*]}" >> $GITHUB_ENV


      - name: Set up Matrix and Encrypt
        id: set-matrix
        run: |
          echo "PERSONALORGS: [${PERSONALORGS[*]}]"

          IFS=' ' read -ra PERSONALORGS_ARRAY <<< "${PERSONALORGS}"
      
          echo "PERSONALORGS_ARRAY: $PERSONALORGS_ARRAY"
      
          # Encrypt each value and join with commas
          matrix_string=()
      
          for value in "${PERSONALORGS_ARRAY[@]}"; do
            encrypted_var=$(echo -n "$value" | sed 's/.com/-/' | base64 -w 0 )
            matrix_string+=("\"$encrypted_var\"")
          done
      
          matrix=$(IFS=,; echo "${matrix_string[*]}")

          matrix_json=$(printf '%s\n' "${matrix_string[@]}" | jq -R . | jq -s -c .)

          echo "matrix=$matrix_json" >> $GITHUB_ENV
          echo "::set-output name=matrix::$matrix_json"


  deploy-branch-to-personal-orgs:
    runs-on: ubuntu-latest
    needs: generate-matrix
    strategy:
      matrix:
        org: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}

    
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      - name: Print Secret
        run: |
          echo "secrets_matrix: ${{ matrix.org }}"

      - name: Decoded Org Secret
        id: decode-secret
        run: |
          decoded_var=$(echo "${{ matrix.org }}" | base64 -d)
          original_var=$(echo "$decoded_var" | sed 's/-$/\.com/')
          echo "personal_org=$original_var" >> $GITHUB_ENV

      - name: Print Org
        run: |
          echo "Personal Org: ${{ env.personal_org }}"


      # Install Salesforce CLI
      - name: 'Install Salesforce CLI'
        run: |
            wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
            mkdir ~/sfdx
            tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
            echo "$HOME/sfdx/bin" >> $GITHUB_PATH
            ~/sfdx/bin/sfdx version

      # install SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
      - name: 'Installing sfdx git delta'
        run: | 
            echo y | sfdx plugins:install sfdx-git-delta
            sfdx plugins 
      # Checkout the source code
      - name: 'Checkout source code'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      # Read pr body
      - name: 'Read PR Body'
        env:

          PR_BODY: ${{github.event.pull_request.body}}

        run: |
            echo $PR_BODY > ./pr_body.txt
            node ./parsePR.js              
            TESTS=$(cat testsToRun.txt)       
            echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV

      # Store secret for both otgs
      - name: 'Populate auth file with SFDX_URL secret of the dev and qa orgs'
        shell: bash
        run: |
            echo ${{ env.personal_org }} > ./SFDX_DEV_URL.txt
      
      - name: 'Create delta packages for new, modified or deleted metadata'
        run: | 
            mkdir changed-sources
            sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/

      - name: Show content of changed-sources
        shell: bash
        run: |
            ls -LR changed-sources/

      # Authenticate to org
      - name: 'Authenticate to Dev Org'
        run: sfdx auth:sfdxurl:store -f ./SFDX_DEV_URL.txt -s -a development

      - name: 'Check-only deploy delta changes - run specified tests'
        if: ${{ env.APEX_TESTS != 'all' }}
        run: |
            echo ${{env.APEX_TESTS}}
            sfdx force:source:deploy -x "changed-sources/package/package.xml" --testlevel RunSpecifiedTests --runtests ${{env.APEX_TESTS}} --json
      # If the env variable equals all, we run all tests
      - name: 'Check-only deploy delta changes - run all tests'
        if: ${{ env.APEX_TESTS == 'all' }}
        run: |
            sfdx force:source:deploy -x "changed-sources/package/package.xml" --testlevel RunLocalTests  --json
            
      - name: 'Deploy destructive changes (if any)'
        run: sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings 



